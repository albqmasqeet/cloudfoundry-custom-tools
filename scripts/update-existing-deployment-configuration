#!/bin/bash -e

source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/.init.sh

dependency $OM_CMD $JQ_CMD curl

PRODUCTS_DEPLOYED=$($CURL_CMD -path /api/v0/deployed/products)

INSTALLATION_NAMES=$(echo "$PRODUCTS_DEPLOYED" | $JQ_CMD -r '.[].installation_name')

function update_resource_configuration {
  local RESOURCE=$1
  local INSTANCE_TYPE=$2
  local INSTANCES=$3
  local PERSISTENT_DISK_SIZE_MB=$4
  local PRODUCT_JOBS=$5
  local PRODUCT_IDENTIFIER=$6

  if [[ ! -z "$INSTANCES" ]]; then
    DATA=$(
      echo "{}" | $JQ_CMD -n \
        --arg INSTANCE_TYPE "$INSTANCE_TYPE" \
        --argjson INSTANCES $INSTANCES \
        --arg PERSISTENT_DISK_SIZE_MB "$PERSISTENT_DISK_SIZE_MB" \
        '
        . +
        {
          "instances": $INSTANCES
        }
        +
        if $INSTANCE_TYPE == "" then
        {
          "instance_type": {
            "id": "automatic"
          }
        }
        else
        {
          "instance_type": {
            "id": $INSTANCE_TYPE
          }
        }
        end
        +
        if $PERSISTENT_DISK_SIZE_MB != "null" then
        {
          "persistent_disk": {
            "size_mb": "automatic"
          }
        }
        else .
        end
        '
      )

    JOB_ID=$(echo "$PRODUCT_JOBS" | $JQ_CMD -r --arg RESOURCE $RESOURCE '.jobs[] | select(.name==$RESOURCE) | .guid')
    UPDATE_RESOURCE_RESPONSE=$($CURL_CMD -path /api/v0/staged/products/$PRODUCT_IDENTIFIER/jobs/$JOB_ID/resource_config -x PUT -d "$DATA")
    echo "Configuring $RESOURCE with $INSTANCES instances and setting the instance type to $INSTANCE_TYPE and recevied response $UPDATE_RESOURCE_RESPONSE"
  fi
}


echo "$INSTALLATION_NAMES" | while read INSTALLATION_NAME
do
  if [[ "$INSTALLATION_NAME" != "p-bosh" ]]; then
    PRODUCT_TYPE=$(echo "$PRODUCTS_DEPLOYED" | $JQ_CMD -r --arg installation_name "$INSTALLATION_NAME" '.[] | select(.installation_name | contains($installation_name)) | .type')
    PRODUCT_JOBS=$($CURL_CMD -path /api/v0/staged/products/$INSTALLATION_NAME/jobs)
    PRODUCT_IDENTIFIER=$(echo "$PRODUCTS_DEPLOYED" | $JQ_CMD -r --arg installation_name "$INSTALLATION_NAME" '.[] | select(.installation_name | contains($installation_name)) | .guid')

    if [[ -f $OUTPUT_DIR/$PRODUCT_TYPE-resources.json ]]; then
      IDENTIFIERS=$(cat $OUTPUT_DIR/$PRODUCT_TYPE-resources.json | $JQ_CMD -r '.resources[] | .identifier')
      CURRENT_PRODUCT_RESOURCES=$($CURL_CMD -path /api/v0/staged/products/$INSTALLATION_NAME/resources)

      echo "$IDENTIFIERS" | while read IDENTIFIER
      do
        EXPECTED_PRODUCT_RESOURCE=$(cat $OUTPUT_DIR/$PRODUCT_TYPE-resources.json | $JQ_CMD -r --arg IDENTIFIER $IDENTIFIER '.resources[] | select(.identifier==$IDENTIFIER)')
        EXPECTED_INSTANCE_TYPE=$(echo "$EXPECTED_PRODUCT_RESOURCE" | $JQ_CMD -r '.instance_type_id')
        EXPECTED_INSTANCES=$(echo "$EXPECTED_PRODUCT_RESOURCE" | $JQ_CMD -r '.instances')
        EXPECTED_PERSISTENT_DISK_SIZE_MB=$(echo "$EXPECTED_PRODUCT_RESOURCE" | $JQ_CMD -r '.persistent_disk_mb')

        CURRENT_PRODUCT_RESOURCE=$(echo "$CURRENT_PRODUCT_RESOURCES" | $JQ_CMD -r --arg IDENTIFIER $IDENTIFIER '.resources[] | select(.identifier==$IDENTIFIER)')
        CURRENT_INSTANCE_TYPE=$(echo "$CURRENT_PRODUCT_RESOURCE" | $JQ_CMD -r '.instance_type_id')
        CURRENT_INSTANCES=$(echo "$CURRENT_PRODUCT_RESOURCE" | $JQ_CMD -r '.instances')
        CURRENT_PERSISTENT_DISK_SIZE_MB=$(echo "$CURRENT_PRODUCT_RESOURCE" | $JQ_CMD -r '.persistent_disk_mb')

        RESOURCE=$(echo "$CURRENT_PRODUCT_RESOURCE" | $JQ_CMD -r '.identifier')


        if [[ ("$EXPECTED_INSTANCE_TYPE" != "$CURRENT_INSTANCE_TYPE") \
              || ("$EXPECTED_INSTANCES" != "$CURRENT_INSTANCES") \
              || ("$EXPECTED_PERSISTENT_DISK_SIZE_MB" != "$CURRENT_PERSISTENT_DISK_SIZE_MB") ]]; then
          update_resource_configuration "$RESOURCE" "$EXPECTED_INSTANCE_TYPE" \
            "$EXPECTED_INSTANCES" "$EXPECTED_PERSISTENT_DISK_SIZE_MB" \
            "$PRODUCT_JOBS" "$PRODUCT_IDENTIFIER"
        else
          echo "No configuration changes for resource $RESOURCE in the deployment $INSTALLATION_NAME, hence skipping..."
        fi

      done

      echo "Successfully updated the $PRODUCT_IDENTIFIER configuration"
    else
      echo "Skipping updating the $PRODUCT_IDENTIFIER configuration as the $OUTPUT_DIR/$PRODUCT_TYPE-resources.json does not exist"
    fi
  fi
done
