#!/bin/bash

function create_directory {
  DIRECTORY=$1
  echo "Creating the $DIRECTORY"
  mkdir -p $DIRECTORY
}

function validate_directory_exists {
  DIRECTORY=$1
  SHOULD_CREATE_DIR=$2
  if [ ! -d "$DIRECTORY" ]; then
    if [[ $SHOULD_CREATE_DIR == true ]]; then
      create_directory $DIRECTORY
    else
      echo "Cannot find the resources directory $DIRECTORY"
      exit 1
    fi
  fi
}

function validate_cli {
  CLI=$1
  set +e
  CLI_EXISTS=$(which $CLI)
  set -e
  if [[ -z "$CLI_EXISTS" ]]; then
    echo "Please install the $CLI"
    exit 1
  fi
}

function update_resource_configuration {
  RESOURCE=$1
  INSTANCE_TYPE=$2
  INSTANCES=$3
  PERSISTENT_DISK_SIZE_MB=$4
  PRODUCT_JOBS=$5
  PRODUCT_IDENTIFIER=$6

  if [[ ! -z "$INSTANCES" ]]; then
    DATA=$(
      echo "{}" | $JQ_CMD -n \
        --arg INSTANCE_TYPE "$INSTANCE_TYPE" \
        --argjson INSTANCES $INSTANCES \
        --arg PERSISTENT_DISK_SIZE_MB "$PERSISTENT_DISK_SIZE_MB" \
        '
        . +
        {
          "instances": $INSTANCES
        }
        +
        if $INSTANCE_TYPE == "" then
        {
          "instance_type": {
            "id": "automatic"
          }
        }
        else
        {
          "instance_type": {
            "id": $INSTANCE_TYPE
          }
        }
        end
        +
        if $PERSISTENT_DISK_SIZE_MB != "null" then
        {
          "persistent_disk": {
            "size_mb": "automatic"
          }
        }
        else .
        end
        '
      )

    JOB_ID=$(echo "$PRODUCT_JOBS" | $JQ_CMD -r --arg RESOURCE $RESOURCE '.jobs[] | select(.name==$RESOURCE) | .guid')
    UPDATE_RESOURCE_RESPONSE=$($OM_CMD -k -t $OPS_MGR_HOST -u $OPS_MGR_USR -p $OPS_MGR_PWD curl -s -path /api/v0/staged/products/$PRODUCT_IDENTIFIER/jobs/$JOB_ID/resource_config -x PUT -d "$DATA")
    echo "Configuring $RESOURCE with $INSTANCES instances and setting the instance type to $INSTANCE_TYPE and recevied response $UPDATE_RESOURCE_RESPONSE"
  fi
}
