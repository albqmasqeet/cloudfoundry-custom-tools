#!/bin/bash

set -e

source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/.init.sh

###
# Converts a directory consisting of a properties file and a resource file into
#   a `task.sh` script.
#
# Parameters:
#   {string} INPUT        The JSON file to cleanup
#   {string} PRODUCT_NAME The name of the product whose JSON is being cleaned up
##

dependency $JQ_CMD

## Variables

PIPELINES_RESOURCE=${PIPELINES_RESOURCE:-pipelines-repo}

PROPERTIES_FILE="$1"
RESOURCES_FILE="$2"
PRODUCT_NAME="$3"

COMMON_VARIABLES=("DEBUG" "OPS_MGR_HOST" "OPS_MGR_USR" "OPS_MGR_PWD" "NETWORK_NAME" "SERVICE_NETWORK_NAME" "OTHER_AZS" "SINGLETON_JOBS_AZ" "PRODUCT_IDENTIFIER")

val='"$\( .key | split(".") | join("_") | sub("properties_"; "") | gsub("-"; "_") | ltrimstr("_"))"'
CONVERT_SCRIPT="
to_entries |
map(
    if (.value.value | type) == \"object\"
    then . + {\"value\": {\"value\": {\"FIX-ME\": \"FIX-ME\"}}}
    else . + {\"value\": {\"value\": $val}} end
) |
from_entries
"

## Validation

if [ ! -r "$PROPERTIES_FILE" ]; then
  ERR_CODE=4 error "Provided properties file $PROPERTIES_FILE does not exist."
fi

if [ ! -r "$RESOURCES_FILE" ]; then
  ERR_CODE=4 error "Provided resources file $RESOURCES_FILE does not exist."
fi

if [ ! -d "$OUTPUT_DIR/tasks/config-$PRODUCT_NAME" ]; then
  log "Creating directory: $OUTPUT_DIR/tasks/config-$PRODUCT_NAME"
  mkdir -p "$OUTPUT_DIR/tasks/config-$PRODUCT_NAME"
fi

OUTFILE="$OUTPUT_DIR/tasks/config-$PRODUCT_NAME/task.sh"
if [ -f "$OUTFILE" ]; then
  log "Removing existing file: $OUTFILE"
  rm -f "$OUTFILE"
fi
touch "$OUTFILE"

OUTFILE_YML="$OUTPUT_DIR/tasks/config-$PRODUCT_NAME/task.yml"
if [ -f "$OUTFILE_YML" ]; then
  log "Removing existing file: $OUTFILE_YML"
  rm -f "$OUTFILE_YML"
fi
touch "$OUTFILE_YML"

## Main

# SH File

log "Writing shabang line"
echo -e "#!/bin/bash" >> "$OUTFILE"

echo  >> "$OUTFILE"

echo 'if [[ $DEBUG == true ]]; then'  >> "$OUTFILE"
echo '  set -ex'  >> "$OUTFILE"
echo 'else' >> "$OUTFILE"
echo '  set -e' >> "$OUTFILE"
echo 'fi' >> "$OUTFILE"

echo  >> "$OUTFILE"

echo 'chmod +x om-cli/om-linux' >> "$OUTFILE"
echo 'OM_CMD=./om-cli/om-linux' >> "$OUTFILE"

echo  >> "$OUTFILE"

echo 'chmod +x ./jq/jq-linux64' >> "$OUTFILE"
echo 'JQ_CMD=./jq/jq-linux64' >> "$OUTFILE"

echo  >> "$OUTFILE"

# YAML File

log "Writing image_resource"
echo "---" >> "$OUTFILE_YML"
echo "platform: linux" >> "$OUTFILE_YML"
echo >> "$OUTFILE_YML"
echo "image_resource:" >> "$OUTFILE_YML"
echo "  type: docker-image" >> "$OUTFILE_YML"
echo "  source: {repository: rjain/buildbox}" >> "$OUTFILE_YML"
echo >> "$OUTFILE_YML"
echo "params:" >> "$OUTFILE_YML"

log "Writing common variables"
for variable in ${COMMON_VARIABLES[@]}; do
  echo "  $variable:" >> "$OUTFILE_YML"
done

## Properties

log "Writing properties_config"
echo 'properties_config=$($JQ_CMD -n \' >> "$OUTFILE"

KEYS=$(cat "$PROPERTIES_FILE" | $JQ_CMD -r 'keys[] | split(".") | join("_") | sub("properties_"; "") | gsub("-"; "_") | ltrimstr("_")')
ORIGINAL_KEYS=( $(cat "$PROPERTIES_FILE" | $JQ_CMD -r 'keys[]') )
JSON=$(cat "$PROPERTIES_FILE" | $JQ_CMD "$CONVERT_SCRIPT" | sed 's/\"\(\$.*\)\"/\1/g')

i=0
for key in $KEYS; do
  DEFAULT_VALUE=$(cat "$PROPERTIES_FILE" | $JQ_CMD --arg pos ${ORIGINAL_KEYS[$i]} '.[$pos].value')

  if (( $(grep -c . <<<"$DEFAULT_VALUE") > 1 )); then
    echo "  --arg $key \"\${$(echo $key | awk '{print toupper($0)}')}\" \\" >> "$OUTFILE"
  elif [[ "$DEFAULT_VALUE" == "null" ]]; then
    echo "  --arg $key \"\${$(echo $key | awk '{print toupper($0)}')}\" \\" >> "$OUTFILE"
  else
    echo "  --arg $key \"\${$(echo $key | awk '{print toupper($0)}'):-$DEFAULT_VALUE}\" \\" >> "$OUTFILE"
  fi

  echo "  $(echo $key | awk '{print toupper($0)}'):" >> "$OUTFILE_YML"
  i=$((i+1))
done

echo "'$JSON'" >> "$OUTFILE"

echo -e ')\n' >> "$OUTFILE"

## Resources

log "Writing resources_config"
echo 'resources_config="{' >> "$OUTFILE"

KEYS=$(cat "$RESOURCES_FILE" | $JQ_CMD -r '.resources[] | .identifier' )
j=$(cat $RESOURCES_FILE | $JQ_CMD '.resources | length')

i=1
for key in $KEYS; do
  DEFAULT_INSTANCE_VALUE=$(cat "$RESOURCES_FILE" | $JQ_CMD --arg key $key '.resources[] | select(.identifier == $key) | .instances_best_fit' )
  DEFAULT_PERSISTENT_DISK_VALUE=$(cat "$RESOURCES_FILE" | $JQ_CMD -r --arg key $key '.resources[] | select(.identifier == $key) | .persistent_disk_mb' )
  DEFAULT_INSTANCE_TYPE_VALUE=$(cat "$RESOURCES_FILE" | $JQ_CMD -r --arg key $key '.resources[] | select(.identifier == $key) | .instance_type_best_fit' )

  echo -n "  \\\"$key\\\": {\\\"instances\\\": \${$(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_INSTANCES:-$DEFAULT_INSTANCE_VALUE}" >> "$OUTFILE"
  echo -n ", \\\"instance_type\\\": { \\\"id\\\": \\\"\${$(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_INSTANCE_TYPE:-$DEFAULT_INSTANCE_TYPE_VALUE}\\\"}" >> "$OUTFILE"

  echo "  $(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_INSTANCES:" >> "$OUTFILE_YML"
  echo "  $(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_INSTANCE_TYPE:" >> "$OUTFILE_YML"

  if [[ $DEFAULT_PERSISTENT_DISK_VALUE != null ]]; then
    echo -n ", \\\"persistent_disk\\\": { \\\"size_mb\\\": \\\"\${$(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_PERSISTENT_DISK_MB:-$DEFAULT_PERSISTENT_DISK_VALUE}\\\"}" >> "$OUTFILE"
    echo "  $(echo $key | sed 's/-/_/g' | awk '{print toupper($0)}')_PERSISTENT_DISK_MB:" >> "$OUTFILE_YML"
  fi
  echo -n "}"  >> "$OUTFILE"

  if [ $((i)) -ne $((j)) ]; then
      echo -n "," >> "$OUTFILE"
  fi

  i=$((i+1))

  echo >> "$OUTFILE"
done
unset i j

echo -e '}"\n' >> "$OUTFILE"

echo >> "$OUTFILE_YML"
echo "inputs:" >> "$OUTFILE_YML"
echo "  - name: $PIPELINES_RESOURCE" >> "$OUTFILE_YML"
echo "  - name: om-cli" >> "$OUTFILE_YML"
echo "  - name: $JQ_CMD" >> "$OUTFILE_YML"
echo >> "$OUTFILE_YML"
echo "run:" >> "$OUTFILE_YML"
echo "  path: $PIPELINES_RESOURCE/tasks/config-$PRODUCT_NAME/task.sh" >> "$OUTFILE_YML"

## Network

log "Writing network_config"
echo 'network_config=$($JQ_CMD -n \' >> "$OUTFILE"
echo '  --arg network_name "$NETWORK_NAME" \ ' >> "$OUTFILE"
echo '  --arg other_azs "$OTHER_AZS" \ ' >> "$OUTFILE"
echo '  --arg singleton_az "$SINGLETON_JOBS_AZ" \ ' >> "$OUTFILE"
echo '  --arg service_network_name "$SERVICE_NETWORK_NAME" \ ' >> "$OUTFILE"
echo "'" >> "$OUTFILE"
echo '  {' >> "$OUTFILE"
echo '    "network": {' >> "$OUTFILE"
echo '      "name": $network_name' >> "$OUTFILE"
echo '    },' >> "$OUTFILE"
echo '    "other_availability_zones": ($other_azs | split(",") | map({name: .})),' >> "$OUTFILE"
echo '    "singleton_availability_zone": {' >> "$OUTFILE"
echo '      "name": $singleton_az' >> "$OUTFILE"
echo '    },' >> "$OUTFILE"
echo '    "service_network": {' >> "$OUTFILE"
echo '      "name": $service_network_name' >> "$OUTFILE"
echo '    }' >> "$OUTFILE"
echo '  }' >> "$OUTFILE"
echo "'" >> "$OUTFILE"
echo -e ')\n' >> "$OUTFILE"

## Run

log "Writing om-linux command"
echo '$OM_CMD \' >> "$OUTFILE"
echo '  --target https://$OPS_MGR_HOST \' >> "$OUTFILE"
echo '  --username "$OPS_MGR_USR" \' >> "$OUTFILE"
echo '  --password "$OPS_MGR_PWD" \' >> "$OUTFILE"
echo '  --skip-ssl-validation \' >> "$OUTFILE"
echo '  configure-product \' >> "$OUTFILE"
echo '  --product-name "$PRODUCT_IDENTIFIER" \' >> "$OUTFILE"
echo '  --product-properties "$properties_config" \' >> "$OUTFILE"
echo '  --product-network "$network_config" \' >> "$OUTFILE"
echo '  --product-resources "$resources_config"' >> "$OUTFILE"

## Cleanup

unset OUTFILE OUTFILE_YML PRODUCT_NAME CONVERT_SCRIPT COMMON_VARIABLES
